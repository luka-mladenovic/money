<?php

namespace Money\Tests;

use Money\Formatter;
use PHPUnit\Framework\TestCase;

class FormatterTest extends TestCase
{
    public function setUp()
    {
        parent::setUp();

        $this->formatter = new Formatter;
    }

    public function formatDataProvider() {
        return [
            [[100,2,'€','1 %',',','.'],'1,00 €'],
            [[1000,2,'€','1%',',','.'],'10,00€'],
            [[1000,2,'€','1 %',',','.'],'10,00 €'],
            [[1000,2,'€','1 %','.',','],'10.00 €'],
            [[12345,2,'€','1 %',',','.'],'123,45 €'],
            [[123456,2,'€','1 %',',','.'],'1.234,56 €'],
            [[1234567,2,'€','1 %',',','.'],'12.345,67 €'],

            [[100,2,'£','% 1',',','.'],'£ 1,00'],
            [[1000,2,'£','%1',',','.'],'£10,00'],
            [[1000,2,'£','% 1',',','.'],'£ 10,00'],
            [[1000,2,'£','% 1','.',','],'£ 10.00'],
            [[12345,2,'£','% 1',',','.'],'£ 123,45'],
            [[123456,2,'£','% 1',',','.'],'£ 1.234,56'],
            [[1234567,2,'£','% 1',',','.'],'£ 12.345,67'],

            [[1,0,'¥','1%',',','.'],'1¥'],
            [[10,0,'¥','1%',',','.'],'10¥'],
            [[100,0,'¥','1%',',','.'],'100¥'],

            [[-100,2,'€','1 %',',','.'],'-1,00 €'],
            [[-1000,2,'€','1 %',',','.'],'-10,00 €'],

            [[-100,2,'£','%1',',','.'],'-£1,00'],
            [[-1000,2,'£','%1',',','.'],'-£10,00'],
        ];
    }

    /**
     * @test
     * @covers \Money\Formatter::format
     * @dataProvider formatDataProvider
     */
    public function it_formats_the_value($args,$result)
    {
        $this->assertEquals(
            $result,
            $this->formatter->format(...$args)
        );
    }
}
